<?xml version="1.0" encoding="UTF-8"?>
<web-app xmlns="http://xmlns.jcp.org/xml/ns/javaee"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xsi:schemaLocation="http://xmlns.jcp.org/xml/ns/javaee
         http://xmlns.jcp.org/xml/ns/javaee/web-app_3_1.xsd"
    version="3.1">
    <servlet>
        <display-name>FlowServlet</display-name>
        <servlet-name>FlowServlet</servlet-name>
        <servlet-class>org.multipaz.wallet.server.FlowServlet</servlet-class>
        <load-on-startup>0</load-on-startup>

        <init-param>
            <param-name>developerMode</param-name>
            <param-value>true</param-value>
        </init-param>
        <init-param>
            <param-name>waitForNotificationSupported</param-name>
            <param-value>true</param-value>
        </init-param>
        <init-param>
            <param-name>androidRequireGmsAttestation</param-name>
            <param-value>false</param-value>
        </init-param>
        <init-param>
            <param-name>androidRequireVerifiedBootGreen</param-name>
            <param-value>false</param-value>
        </init-param>
        <init-param>
            <param-name>androidRequireAppSignatureCertificateDigests</param-name>
            <param-value></param-value>
        </init-param>

        <init-param>
            <param-name>issuingAuthorityList</param-name>
            <param-value>
                utopia
                utopia_pid
                utopia_photoid
                eldorado
            </param-value>
        </init-param>

        <init-param>
            <param-name>issuingAuthority.utopia.name</param-name>
            <param-value>Utopia DMV</param-value>
        </init-param>
        <init-param>
            <param-name>issuingAuthority.utopia.type</param-name>
            <param-value>DrivingLicense</param-value>
        </init-param>
        <init-param>
            <param-name>issuingAuthority.utopia.logo</param-name>
            <param-value>utopia/logo.png</param-value>
        </init-param>
        <init-param>
            <param-name>issuingAuthority.utopia.description</param-name>
            <param-value>Utopia Driver's License</param-value>
        </init-param>
        <init-param>
            <param-name>issuingAuthority.utopia.cardArt</param-name>
            <param-value>utopia/card_art.png</param-value>
        </init-param>
        <init-param>
            <param-name>issuingAuthority.utopia.requireUserAuthenticationToViewDocument</param-name>
            <param-value>true</param-value>
        </init-param>

        <init-param>
            <param-name>issuingAuthority.utopia_pid.name</param-name>
            <param-value>Utopia Gov</param-value>
        </init-param>
        <init-param>
            <param-name>issuingAuthority.utopia_pid.type</param-name>
            <param-value>EuPid</param-value>
        </init-param>
        <init-param>
            <param-name>issuingAuthority.utopia_pid.logo</param-name>
            <param-value>utopia_pid/logo.png</param-value>
        </init-param>
        <init-param>
            <param-name>issuingAuthority.utopia_pid.description</param-name>
            <param-value>Utopia Personal ID</param-value>
        </init-param>
        <init-param>
            <param-name>issuingAuthority.utopia_pid.cardArt</param-name>
            <param-value>utopia_pid/card_art.png</param-value>
        </init-param>
        <init-param>
            <param-name>issuingAuthority.utopia_pid.requireUserAuthenticationToViewDocument</param-name>
            <param-value>true</param-value>
        </init-param>

        <init-param>
            <param-name>issuingAuthority.utopia_photoid.name</param-name>
            <param-value>Utopia Gov</param-value>
        </init-param>
        <init-param>
            <param-name>issuingAuthority.utopia_photoid.type</param-name>
            <param-value>PhotoId</param-value>
        </init-param>
        <init-param>
            <param-name>issuingAuthority.utopia_photoid.logo</param-name>
            <param-value>utopia_photoid/logo.png</param-value>
        </init-param>
        <init-param>
            <param-name>issuingAuthority.utopia_photoid.description</param-name>
            <param-value>Utopia Photo ID</param-value>
        </init-param>
        <init-param>
            <param-name>issuingAuthority.utopia_photoid.cardArt</param-name>
            <param-value>utopia_photoid/card_art.png</param-value>
        </init-param>
        <init-param>
            <param-name>issuingAuthority.utopia_photoid.requireUserAuthenticationToViewDocument</param-name>
            <param-value>true</param-value>
        </init-param>

        <init-param>
            <param-name>issuingAuthority.eldorado.name</param-name>
            <param-value>El Dorado DMV</param-value>
        </init-param>
        <init-param>
            <param-name>issuingAuthority.eldorado.type</param-name>
            <param-value>DrivingLicense</param-value>
        </init-param>
        <init-param>
            <param-name>issuingAuthority.eldorado.logo</param-name>
            <param-value>eldorado/logo.png</param-value>
        </init-param>
        <init-param>
            <param-name>issuingAuthority.eldorado.description</param-name>
            <param-value>El Dorado Driver License</param-value>
        </init-param>
        <init-param>
            <param-name>issuingAuthority.eldorado.cardArt</param-name>
            <param-value>eldorado/card_art.png</param-value>
        </init-param>
        <init-param>
            <param-name>issuingAuthority.eldorado.requireUserAuthenticationToViewDocument</param-name>
            <param-value>false</param-value>
        </init-param>

        <!--
         Sample config for MySQL database server

        <init-param>
            <param-name>databaseConnection</param-name>
            <param-value>jdbc:mysql://localhost:3306/wallet?serverTimezone=UTC</param-value>
        </init-param>
        <init-param>
            <param-name>databaseUser</param-name>
            <param-value>wallet</param-value>
        </init-param>
        <init-param>
            <param-name>databasePassword</param-name>
            <param-value>mypassword</param-value>
        </init-param>
        -->

    </servlet>

    <servlet-mapping>
        <servlet-name>FlowServlet</servlet-name>
        <url-pattern>/flow/*</url-pattern>
    </servlet-mapping>


    <servlet>
        <display-name>AdminServlet</display-name>
        <servlet-name>AdminServlet</servlet-name>
        <servlet-class>org.multipaz.wallet.server.AdminServlet</servlet-class>

        <!-- must be loaded after FlowServlet in order to use FlowNotifications! -->
        <load-on-startup>1</load-on-startup>

        <init-param>
            <!--
                This is initial admin password. Login at the servlet root page and change it.
                Once changed, new password is written into the database and new deployments will
                read it from there.
             -->
            <param-name>initialAdminPassword</param-name>
            <param-value>FeelingLucky!</param-value>
        </init-param>
    </servlet>

    <servlet-mapping>
        <servlet-name>AdminServlet</servlet-name>
        <url-pattern>/admin/*</url-pattern>
    </servlet-mapping>

    <servlet>
        <display-name>LandingServlet</display-name>
        <servlet-name>LandingServlet</servlet-name>
        <servlet-class>org.multipaz.wallet.server.LandingServlet</servlet-class>
        <load-on-startup>1</load-on-startup>
    </servlet>

    <servlet-mapping>
        <servlet-name>LandingServlet</servlet-name>
        <url-pattern>/landing/*</url-pattern>
    </servlet-mapping>

    <servlet>
        <display-name>CsaServlet</display-name>
        <servlet-name>CsaServlet</servlet-name>
        <servlet-class>org.multipaz.wallet.server.CloudSecureAreaServlet</servlet-class>
        <load-on-startup>0</load-on-startup>

        <init-param>
            <param-name>androidRequireGmsAttestation</param-name>
            <param-value>false</param-value>
        </init-param>
        <init-param>
            <param-name>androidRequireVerifiedBootGreen</param-name>
            <param-value>false</param-value>
        </init-param>
        <init-param>
            <param-name>androidRequireAppSignatureCertificateDigests</param-name>
            <param-value></param-value>
        </init-param>
    </servlet>

    <servlet-mapping>
        <servlet-name>CsaServlet</servlet-name>
        <url-pattern>/csa</url-pattern>
    </servlet-mapping>

    <servlet>
        <display-name>VerifierServlet</display-name>
        <servlet-name>VerifierServlet</servlet-name>
        <servlet-class>org.multipaz.wallet.server.VerifierServlet</servlet-class>
        <load-on-startup>0</load-on-startup>

        <init-param>
            <!-- The Base URL to send to clients. This should be configured to whatever
                 hostname the HTTP server has been configured with, for example

                  https://something.example.com/verifier

                 If left blank the IP address of the server is used *without* TLS, for example

                   http://192.168.42.42:8080/server.

                 This of course isn't secure at all but it does mean that the verifier
                 works out of the box for development without any configuration.
            -->
            <param-name>verifierBaseUrl</param-name>
            <param-value></param-value>
        </init-param>

        <init-param>
            <!-- The ClientID to use, without the client_id_scheme prefix.
                 If left blank the value of `verifierBaseUrl` is used.
             -->
            <param-name>verifierClientId</param-name>
            <param-value></param-value>
        </init-param>
    </servlet>

    <servlet-mapping>
        <servlet-name>VerifierServlet</servlet-name>
        <url-pattern>/verifier</url-pattern>
        <url-pattern>/verifier/*</url-pattern>
    </servlet-mapping>

    <!-- This is required to serve the files in the webapp directory -->
    <servlet-mapping>
        <servlet-name>default</servlet-name>
        <url-pattern>/*</url-pattern>
    </servlet-mapping>

    <!-- openid4vci server components -->

    <servlet>
        <display-name>ParServlet</display-name>
        <servlet-name>ParServlet</servlet-name>
        <servlet-class>org.multipaz.server.openid4vci.ParServlet</servlet-class>
        <load-on-startup>10</load-on-startup>
    </servlet>

    <servlet-mapping>
        <servlet-name>ParServlet</servlet-name>
        <url-pattern>/openid4vci/par</url-pattern>
    </servlet-mapping>

    <servlet>
        <display-name>AuthorizeServlet</display-name>
        <servlet-name>AuthorizeServlet</servlet-name>
        <servlet-class>org.multipaz.server.openid4vci.AuthorizeServlet</servlet-class>
        <load-on-startup>10</load-on-startup>
    </servlet>

    <servlet-mapping>
        <servlet-name>AuthorizeServlet</servlet-name>
        <url-pattern>/openid4vci/authorize</url-pattern>
    </servlet-mapping>

    <servlet>
        <display-name>AuthorizeChallengeServlet</display-name>
        <servlet-name>AuthorizeChallengeServlet</servlet-name>
        <servlet-class>org.multipaz.server.openid4vci.AuthorizeChallengeServlet</servlet-class>
        <load-on-startup>10</load-on-startup>
    </servlet>

    <servlet-mapping>
        <servlet-name>AuthorizeChallengeServlet</servlet-name>
        <url-pattern>/openid4vci/authorize-challenge</url-pattern>
    </servlet-mapping>

    <servlet>
        <display-name>Openid4VpResponseServlet</display-name>
        <servlet-name>Openid4VpResponseServlet</servlet-name>
        <servlet-class>org.multipaz.server.openid4vci.Openid4VpResponseServlet</servlet-class>
        <load-on-startup>10</load-on-startup>
    </servlet>

    <servlet-mapping>
        <servlet-name>Openid4VpResponseServlet</servlet-name>
        <url-pattern>/openid4vci/openid4vp-response</url-pattern>
    </servlet-mapping>

    <servlet>
        <display-name>FinishAuthorizationServlet</display-name>
        <servlet-name>FinishAuthorizationServlet</servlet-name>
        <servlet-class>org.multipaz.server.openid4vci.FinishAuthorizationServlet</servlet-class>
        <load-on-startup>10</load-on-startup>
    </servlet>

    <servlet-mapping>
        <servlet-name>FinishAuthorizationServlet</servlet-name>
        <url-pattern>/openid4vci/finish_authorization</url-pattern>
    </servlet-mapping>

    <servlet>
        <display-name>TokenServlet</display-name>
        <servlet-name>TokenServlet</servlet-name>
        <servlet-class>org.multipaz.server.openid4vci.TokenServlet</servlet-class>
        <load-on-startup>10</load-on-startup>
    </servlet>

    <servlet-mapping>
        <servlet-name>TokenServlet</servlet-name>
        <url-pattern>/openid4vci/token</url-pattern>
    </servlet-mapping>

    <servlet>
        <display-name>CredentialServlet</display-name>
        <servlet-name>CredentialServlet</servlet-name>
        <servlet-class>org.multipaz.server.openid4vci.CredentialServlet</servlet-class>
        <load-on-startup>10</load-on-startup>
    </servlet>

    <servlet-mapping>
        <servlet-name>CredentialServlet</servlet-name>
        <url-pattern>/openid4vci/credential</url-pattern>
    </servlet-mapping>

    <servlet>
        <display-name>CredentialRequestServlet</display-name>
        <servlet-name>CredentialRequestServlet</servlet-name>
        <servlet-class>org.multipaz.server.openid4vci.CredentialRequestServlet</servlet-class>
        <load-on-startup>10</load-on-startup>
    </servlet>

    <servlet-mapping>
        <servlet-name>CredentialRequestServlet</servlet-name>
        <url-pattern>/openid4vci/credential_request</url-pattern>
    </servlet-mapping>

    <servlet>
        <display-name>QrServlet</display-name>
        <servlet-name>QrServlet</servlet-name>
        <servlet-class>org.multipaz.server.openid4vci.QrServlet</servlet-class>
        <load-on-startup>10</load-on-startup>
    </servlet>

    <servlet-mapping>
        <servlet-name>QrServlet</servlet-name>
        <url-pattern>/openid4vci/qr</url-pattern>
    </servlet-mapping>

    <servlet>
        <display-name>WellKnownOpenidCredentialIssuanceServlet</display-name>
        <servlet-name>WellKnownOpenidCredentialIssuanceServlet</servlet-name>
        <servlet-class>org.multipaz.server.openid4vci.WellKnownOpenidCredentialIssuerServlet</servlet-class>
        <load-on-startup>10</load-on-startup>
    </servlet>

    <servlet-mapping>
        <servlet-name>WellKnownOpenidCredentialIssuanceServlet</servlet-name>
        <url-pattern>/openid4vci/.well-known/openid-credential-issuer</url-pattern>
    </servlet-mapping>

    <servlet>
        <display-name>WellKnownOauthAuthorizationServlet</display-name>
        <servlet-name>WellKnownOauthAuthorizationServlet</servlet-name>
        <servlet-class>org.multipaz.server.openid4vci.WellKnownOauthAuthorizationServlet</servlet-class>
        <load-on-startup>10</load-on-startup>
    </servlet>

    <servlet-mapping>
        <servlet-name>WellKnownOauthAuthorizationServlet</servlet-name>
        <url-pattern>/openid4vci/.well-known/oauth-authorization-server</url-pattern>
    </servlet-mapping>
</web-app>
