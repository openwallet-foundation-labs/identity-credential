/*
 * Copyright 2023 The Android Open Source Project
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package org.multipaz.mdoc.connectionmethod

import android.nfc.FormatException
import android.nfc.NdefMessage
import android.nfc.NdefRecord
import android.util.Pair
import androidx.test.filters.SmallTest
import com.android.identity.android.mdoc.transport.DataTransportBle.Companion.fromNdefRecord
import com.android.identity.android.util.NfcUtil
import org.multipaz.cbor.Cbor
import org.multipaz.cbor.DiagnosticOption
import org.multipaz.mdoc.connectionmethod.ConnectionMethod.Companion.fromDeviceEngagement
import org.multipaz.util.UUID
import org.multipaz.util.fromHex
import org.multipaz.util.toHex
import org.junit.Assert
import org.junit.Test

// This is quite similar to ConnectionMethodTest but tests all the NDEF results
//
// TODO: port all the NDEF routines to not use any Android specific stuff so we can
//  include it in the non-Android specific library and combine this test with
//  ConnectionMethod
//
class ConnectionMethodNdefTest {
    @Test
    @SmallTest
    fun testConnectionMethodNfc() {
        val cm = ConnectionMethodNfc(4096, 32768)
        val decoded = fromDeviceEngagement(cm.toDeviceEngagement()) as ConnectionMethodNfc?
        Assert.assertNotNull(decoded)
        Assert.assertEquals(decoded!!.commandDataFieldMaxLength, decoded.commandDataFieldMaxLength)
        Assert.assertEquals(decoded.responseDataFieldMaxLength, decoded.responseDataFieldMaxLength)
        Assert.assertEquals(
            "[\n" +
                    "  1,\n" +
                    "  1,\n" +
                    "  {\n" +
                    "    0: 4096,\n" +
                    "    1: 32768\n" +
                    "  }\n" +
                    "]",
            Cbor.toDiagnostics(cm.toDeviceEngagement(), setOf(DiagnosticOption.PRETTY_PRINT))
        )
    }

    @Test
    @SmallTest
    fun testConnectionMethodBle() {
        val uuidPeripheral = UUID(0UL, 1UL)
        val uuidCentral = UUID(123456789UL, 987654321UL)
        var cm = ConnectionMethodBle(
            true,
            true,
            uuidPeripheral,
            uuidCentral
        )
        var decoded = fromDeviceEngagement(cm.toDeviceEngagement()) as ConnectionMethodBle?
        Assert.assertNotNull(decoded)
        Assert.assertTrue(decoded!!.supportsPeripheralServerMode)
        Assert.assertTrue(decoded.supportsCentralClientMode)
        Assert.assertEquals(uuidPeripheral, decoded.peripheralServerModeUuid)
        Assert.assertEquals(uuidCentral, decoded.centralClientModeUuid)
        Assert.assertEquals(
            """[
  2,
  1,
  {
    0: true,
    1: true,
    10: h'00000000000000000000000000000001',
    11: h'00000000075bcd15000000003ade68b1'
  }
]""", Cbor.toDiagnostics(cm.toDeviceEngagement(), setOf(DiagnosticOption.PRETTY_PRINT))
        )

        // For use in NFC, the UUIDs have to be the same
        val uuidBoth = UUID(0UL, 2UL)
        cm = ConnectionMethodBle(
            true,
            true,
            uuidBoth,
            uuidBoth
        )

        // The Carrier Reference should be the same whether it's generated by the mdoc (for Handover
        // Select) or the mdoc reader (for Handover Request).
        val pair = NfcUtil.toNdefRecord(cm, listOf("mdoc"), true)
        decoded = fromNdefRecord(pair!!.first, true)
        Assert.assertNotNull(decoded)
        Assert.assertTrue(decoded!!.supportsPeripheralServerMode)
        Assert.assertTrue(decoded.supportsCentralClientMode)
        Assert.assertEquals(uuidBoth, decoded.peripheralServerModeUuid)
        Assert.assertEquals(uuidBoth, decoded.centralClientModeUuid)
        Assert.assertEquals(
            "da2015016170706c69636174696f6e2f766e642e626c7565746f6f74682e6c652e6f6f6230021c03110702000000000000000000000000000000",
            NdefMessage(pair.first).toByteArray().toHex()
        )
        Assert.assertEquals(
            "01013001046d646f63",
            pair.second.toHex()
        )
        val hrPair = NfcUtil.toNdefRecord(cm, listOf(""), false)
        Assert.assertArrayEquals(NdefMessage(pair.first).toByteArray(), NdefMessage(hrPair!!.first).toByteArray())
    }

    @Test
    @SmallTest
    fun testConnectionMethodBleOnlyCentralClient() {
        val uuid = UUID(123456789UL, 987654321UL)
        val cm = ConnectionMethodBle(
            false,
            true,
            null,
            uuid
        )
        var decoded = fromDeviceEngagement(cm.toDeviceEngagement()) as ConnectionMethodBle?
        Assert.assertNotNull(decoded)
        Assert.assertFalse(decoded!!.supportsPeripheralServerMode)
        Assert.assertTrue(decoded.supportsCentralClientMode)
        Assert.assertNull(decoded.peripheralServerModeUuid)
        Assert.assertEquals(uuid, decoded.centralClientModeUuid)
        Assert.assertEquals(
            """[
  2,
  1,
  {
    0: false,
    1: true,
    11: h'00000000075bcd15000000003ade68b1'
  }
]""", Cbor.toDiagnostics(cm.toDeviceEngagement(), setOf(DiagnosticOption.PRETTY_PRINT))
        )

        // The Carrier Reference depends on whether it's generated by the mdoc (for Handover Select)
        // or the mdoc reader (for Handover Request). The only difference is how the "LE Role" is
        // set...
        //   - for HS / mdoc LE role will be set to 0x01 (Only Central Role supported).
        //   - for HR / mdoc reader LE role will be set to 0x00 (Only Peripheral Role supported).
        var pair: Pair<NdefRecord, ByteArray>? = NfcUtil.toNdefRecord(cm, listOf("mdoc"), true)
        decoded = fromNdefRecord(pair!!.first, true)
        Assert.assertNotNull(decoded)
        Assert.assertFalse(decoded!!.supportsPeripheralServerMode)
        Assert.assertTrue(decoded.supportsCentralClientMode)
        Assert.assertNull(decoded.peripheralServerModeUuid)
        Assert.assertEquals(uuid, decoded.centralClientModeUuid)
        Assert.assertEquals(
            "da2015016170706c69636174696f6e2f766e642e626c7565746f6f74682e6c652e6f6f6230021c011107b168de3a0000000015cd5b0700000000",
            NdefMessage(pair.first).toByteArray().toHex()
        )
        Assert.assertEquals(
            "01013001046d646f63",
            pair.second!!.toHex()
        )
        pair = NfcUtil.toNdefRecord(cm, emptyList(), false)
        decoded = fromNdefRecord(pair!!.first, false)
        Assert.assertNotNull(decoded)
        Assert.assertFalse(decoded!!.supportsPeripheralServerMode)
        Assert.assertTrue(decoded.supportsCentralClientMode)
        Assert.assertNull(decoded.peripheralServerModeUuid)
        Assert.assertEquals(uuid, decoded.centralClientModeUuid)
        Assert.assertEquals(
            "da2015016170706c69636174696f6e2f766e642e626c7565746f6f74682e6c652e6f6f6230021c001107b168de3a0000000015cd5b0700000000",
            NdefMessage(pair.first).toByteArray().toHex()
        )
        Assert.assertEquals("01013000", pair.second!!.toHex())
    }

    @Test
    @SmallTest
    fun testConnectionMethodBleOnlyPeripheralServer() {
        val uuid = UUID(0UL, 1UL)
        val cm = ConnectionMethodBle(
            true,
            false,
            uuid,
            null
        )
        var decoded = fromDeviceEngagement(cm.toDeviceEngagement()) as ConnectionMethodBle?
        Assert.assertNotNull(decoded)
        Assert.assertTrue(decoded!!.supportsPeripheralServerMode)
        Assert.assertFalse(decoded.supportsCentralClientMode)
        Assert.assertEquals(uuid, decoded.peripheralServerModeUuid)
        Assert.assertNull(decoded.centralClientModeUuid)
        Assert.assertEquals(
            """[
  2,
  1,
  {
    0: true,
    1: false,
    10: h'00000000000000000000000000000001'
  }
]""", Cbor.toDiagnostics(cm.toDeviceEngagement(), setOf(DiagnosticOption.PRETTY_PRINT))
        )

        // The Carrier Reference depends on whether it's generated by the mdoc (for Handover Select)
        // or the mdoc reader (for Handover Request). The only difference is how the "LE Role" is
        // set...
        //   - for HS / mdoc LE role will be set to 0x00 (Only Peripheral Role supported).
        //   - for HR / mdoc reader LE role will be set to 0x01 (Only Central Role supported).
        var pair: Pair<NdefRecord, ByteArray>? = NfcUtil.toNdefRecord(cm, listOf("mdoc"), true)
        decoded = fromNdefRecord(pair!!.first, true)
        Assert.assertNotNull(decoded)
        Assert.assertTrue(decoded!!.supportsPeripheralServerMode)
        Assert.assertFalse(decoded.supportsCentralClientMode)
        Assert.assertEquals(uuid, decoded.peripheralServerModeUuid)
        Assert.assertNull(decoded.centralClientModeUuid)
        Assert.assertEquals(
            "da2015016170706c69636174696f6e2f766e642e626c7565746f6f74682e6c652e6f6f6230021c00110701000000000000000000000000000000",
            NdefMessage(pair.first).toByteArray().toHex()
        )
        Assert.assertEquals(
            "01013001046d646f63",
            pair.second!!.toHex()
        )
        pair = NfcUtil.toNdefRecord(cm, emptyList(), false)
        decoded = fromNdefRecord(pair!!.first, false)
        Assert.assertNotNull(decoded)
        Assert.assertTrue(decoded!!.supportsPeripheralServerMode)
        Assert.assertFalse(decoded.supportsCentralClientMode)
        Assert.assertEquals(uuid, decoded.peripheralServerModeUuid)
        Assert.assertNull(decoded.centralClientModeUuid)
        Assert.assertEquals(
            "da2015016170706c69636174696f6e2f766e642e626c7565746f6f74682e6c652e6f6f6230021c01110701000000000000000000000000000000",
            NdefMessage(pair.first).toByteArray().toHex()
        )
        Assert.assertEquals("01013000", pair.second!!.toHex())
    }

    @Test
    @SmallTest
    fun testConnectionMethodBleNoUuid() {
        // (Annoyingly) it's permissible to omit the UUID, for example if doing NFC negotiated
        // handover and replying to a Handover Request message. In that case the UUID is the one
        // the requester specified in Handover Request and there's no need to repeat it in Handover
        // Select.
        //
        val cm = ConnectionMethodBle(
            false,
            true,
            null,
            null
        )
        val pair = NfcUtil.toNdefRecord(cm, listOf("mdoc"), true)
        val decoded = fromNdefRecord(pair!!.first, true)
        Assert.assertNotNull(decoded)
        Assert.assertFalse(decoded!!.supportsPeripheralServerMode)
        Assert.assertTrue(decoded.supportsCentralClientMode)
        Assert.assertNull(decoded.peripheralServerModeUuid)
        Assert.assertNull(decoded.centralClientModeUuid)
    }

    // This is a test against a vector for an mdoc which sends a Handover Select message
    // with BLE mdoc central client mode and no UUID. Check that we can parse it.
    @Test
    @SmallTest
    @Throws(FormatException::class)
    fun testConnectionMethodVector() {
        val ndefHsMessage =
            NdefMessage("91020f487315d10209616301013001046d646f631a2003016170706c69636174696f6e2f766e642e626c7565746f6f74682e6c652e6f6f6230021c015c1e580469736f2e6f72673a31383031333a646576696365656e676167656d656e746d646f63a20063312e30018201d818584ba401022001215820e778fcb1513fad715c755462cb4d3ee3c1de2f618d10e07788a35eda2da58b982258205e6ee59512414cdb11ee330db2590ab6d1b5a78ede4a0ecac02e3af65cafbcd9".fromHex())
        Assert.assertNotNull(ndefHsMessage)
        var cm: ConnectionMethodBle? = null
        for (r in ndefHsMessage.records) {
            if (r.tnf == NdefRecord.TNF_MIME_MEDIA) {
                cm = fromNdefRecord(r, true)
            }
        }
        Assert.assertNotNull(cm)
        Assert.assertFalse(cm!!.supportsPeripheralServerMode)
        Assert.assertTrue(cm.supportsCentralClientMode)
        Assert.assertNull(cm.peripheralServerModeUuid)
        Assert.assertNull(cm.centralClientModeUuid)
    }
}
